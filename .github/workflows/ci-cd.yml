name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality and Security Check
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check JavaScript syntax
      run: |
        for file in server.js database.js socketHandler.js routes/*.js middleware/*.js scripts/*.js; do
          node -c "$file" && echo "$file: OK"
        done

    - name: Run security audit
      run: npm audit --audit-level=high || true

    - name: Check for secrets
      run: |
        if grep -r "password\s*=\s*['\"]" --include="*.js" --exclude-dir=node_modules . ; then
          echo "❌ Potential hardcoded secrets found!"
          exit 1
        fi
        echo "✅ No hardcoded secrets detected"

  # Build and Test
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: medical_platform_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      env:
        PGPASSWORD: postgres
      run: |
        psql -h localhost -U postgres -d medical_platform_test -f Schema.sql

    - name: Run verification script
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: medical_platform_test
        DB_HOST: localhost
        DB_PORT: 5432
        JWT_SECRET: test-secret-key-do-not-use-in-production
        NODE_ENV: test
      run: npm run verify

    - name: Check application starts
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: medical_platform_test
        DB_HOST: localhost
        DB_PORT: 5432
        JWT_SECRET: test-secret-key-do-not-use-in-production
        PORT: 5000
      run: |
        timeout 10s node server.js || exit_code=$?
        if [ ${exit_code:-0} -eq 124 ]; then
          echo "✅ Server started successfully (timed out as expected)"
          exit 0
        elif [ ${exit_code:-0} -eq 0 ]; then
          echo "✅ Server started successfully"
          exit 0
        else
          echo "❌ Server failed to start"
          exit 1
        fi

  # Docker Build Test
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: medical-platform-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose configuration
      run: |
        docker compose config > /dev/null
        echo "✅ Docker Compose configuration is valid"

  # CodeQL Security Analysis
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
